// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Loops.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Loops.OpenApiClient.Transactional
{
    /// <summary>
    /// Builds and executes requests for operations under \transactional
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionalRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionalRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/transactional{?cursor*,perPage*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TransactionalRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/transactional{?cursor*,perPage*}", rawUrl)
        {
        }
        /// <summary>
        /// Get a list of published transactional emails.
        /// </summary>
        /// <returns>A List&lt;global::Soenneker.Loops.OpenApiClient.Models.TransactionalEmail&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Soenneker.Loops.OpenApiClient.Models.TransactionalEmail>?> GetAsync(Action<RequestConfiguration<global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder.TransactionalRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Soenneker.Loops.OpenApiClient.Models.TransactionalEmail>> GetAsync(Action<RequestConfiguration<global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder.TransactionalRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Soenneker.Loops.OpenApiClient.Models.TransactionalEmail>(requestInfo, global::Soenneker.Loops.OpenApiClient.Models.TransactionalEmail.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Send a transactional email to a contact.&lt;br&gt;Please [email us](mailto:help@loops.so) to enable attachments on your account before using them with the API.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Loops.OpenApiClient.Models.TransactionalSuccessResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Loops.OpenApiClient.Models.TransactionalFailure3Response">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Loops.OpenApiClient.Models.IdempotencyKeyFailureResponse">When receiving a 409 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Loops.OpenApiClient.Models.TransactionalSuccessResponse?> PostAsync(global::Soenneker.Loops.OpenApiClient.Models.TransactionalRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Loops.OpenApiClient.Models.TransactionalSuccessResponse> PostAsync(global::Soenneker.Loops.OpenApiClient.Models.TransactionalRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Soenneker.Loops.OpenApiClient.Models.TransactionalFailure3Response.CreateFromDiscriminatorValue },
                { "409", global::Soenneker.Loops.OpenApiClient.Models.IdempotencyKeyFailureResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Loops.OpenApiClient.Models.TransactionalSuccessResponse>(requestInfo, global::Soenneker.Loops.OpenApiClient.Models.TransactionalSuccessResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a list of published transactional emails.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder.TransactionalRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder.TransactionalRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Send a transactional email to a contact.&lt;br&gt;Please [email us](mailto:help@loops.so) to enable attachments on your account before using them with the API.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Loops.OpenApiClient.Models.TransactionalRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Loops.OpenApiClient.Models.TransactionalRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Loops.OpenApiClient.Transactional.TransactionalRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get a list of published transactional emails.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TransactionalRequestBuilderGetQueryParameters 
        {
            /// <summary>A cursor, to return a specific page of results. Cursors can be found from the `pagination.nextCursor` value in each response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("cursor")]
            public string? Cursor { get; set; }
#nullable restore
#else
            [QueryParameter("cursor")]
            public string Cursor { get; set; }
#endif
            /// <summary>How many results to return in each request. Must be between 10 and 50. Default is 20.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("perPage")]
            public string? PerPage { get; set; }
#nullable restore
#else
            [QueryParameter("perPage")]
            public string PerPage { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
